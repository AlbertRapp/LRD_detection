#| message: false
#| warning: false
setwd(here::here('01_finite_variance_simulations'))
source('../helpers/00_libraries.R')
source('../helpers/01_simulation_helpers.R')
source('../helpers/02_regression_helpers.R')
source('../helpers/03_evaluation_helpers.R')
compute_grid(500)
compute_grid(200)
#| message: false
#| warning: false
setwd(here::here('01_finite_variance_simulations'))
source('../helpers/00_libraries.R')
source('../helpers/01_simulation_helpers.R')
source('../helpers/02_regression_helpers.R')
source('../helpers/03_evaluation_helpers.R')
getwd()
# Chunk 1
#| echo: false
all_times <- list()
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
# record the current time before each chunk
now <<- Sys.time()
} else {
# calculate the time difference after a chunk
later <- Sys.time()
interval <- lubridate::interval(now, later)
# return a character string to show the time
times <- list(
chunk = options$label,
sec = round(interval / lubridate::seconds(1), 2),
min = round(interval / lubridate::minutes(1), 2),
hours =  round(interval / lubridate::hours(1), 2)
)
all_times[[options$label]] <<- times
}
}
}))
knitr::opts_chunk$set(time_it = TRUE)
# Chunk 2: packages
#| message: false
#| warning: false
setwd(here::here('01_finite_variance_simulations'))
source('../helpers/00_libraries.R')
source('../helpers/01_simulation_helpers.R')
source('../helpers/02_regression_helpers.R')
source('../helpers/03_evaluation_helpers.R')
Hs <- seq(0.3, 0.7, length.out = 12) # Hurst parameter
my_mset <- metric_set(accuracy, sens, spec)
n_seeds <- params$n_seeds # simulations per Hurst parameter and TMax
n_seeds
TMax <- params$TMax # ts length
TMax
grid_GPH <- compute_grid(TMax = TMax)
grid_GPH
compute_grid(100)
compute_grid(100 / 3)
4950 / 528
4950 / 528 * 1.64
nrow_500 <- compute_grid(500) %>% nrow()
nrow_500
nrow_100 <- compute_grid(100) %>% nrow()
nrow_100
nrow_500 / nrow_100
ceiling(nrow_500 / nrow_100)
n_grid_slices <- ceiling(nrow_500 / nrow_100)
n_grid_slices * 14
n_grid_slices * 14 / 60
grid_GPH
split(grid_GPH, sample(1:2, nrow(grid_GPH), replace=T))
split(grid_GPH, sample(1:n_grid_slices, nrow(grid_GPH), replace=T))
nrow_100
grid_GPH_slices <- split(
grid_GPH,
sample(1:n_grid_slices, nrow(grid_GPH), replace=T)
)
for (grid_slice in grid_GPH_slices) {
nrow(grid_slice)
}
for (grid_slice in grid_GPH_slices) {
nrow(grid_slice) %>% print()
}
if (TMax > 100) {
# If TMax is not small enough, then compute grid estimates in chunks
nrow_100 <- compute_grid(100) %>% nrow()
n_grid_slices <- ceiling(nrow(grid_GPH) / nrow_100)
set.seed(4635635)
grid_GPH_slices <- split(
grid_GPH,
sample(1:n_grid_slices, nrow(grid_GPH), replace=T)
)
for (grid_slice in grid_GPH_slices) {
idx <- which(grid_slice == grid_GPH_slices)
print(idx)
}
}
nrow_100 <- compute_grid(100) %>% nrow()
n_grid_slices <- ceiling(nrow(grid_GPH) / nrow_100)
set.seed(4635635)
grid_GPH_slices <- split(
grid_GPH,
sample(1:n_grid_slices, nrow(grid_GPH), replace=T)
)
for (grid_slice in grid_GPH_slices) {
idx <- which(grid_slice == grid_GPH_slices)
print(idx)
}
for (idx in seq_along(grid_GPH_slices)) {
print(idx)
print(grid_GPH_slices[[idx]])
}
compute_grid(100) %>% nrow()
compute_grid(200) %>% nrow()
