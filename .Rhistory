ts = map(ts, ~convert_to_bernoulli(., mu = mu))
)
vars <- time_series_dat %>%
mutate(variance = future_map(ts, estimate_variances, kMax = min(TMax / 3, 100)))
tictoc::toc(log = T)
#| message: false
#| warning: false
setwd(here::here())
source('helpers/00_libraries.R')
source('helpers/01_simulation_helpers.R')
source('helpers/02_regression_helpers.R')
source('helpers/03_evaluation_helpers.R')
renv::restore()
renv::history()
renv::install()
warnings()
#| message: false
#| warning: false
setwd(here::here())
source('helpers/00_libraries.R')
source('helpers/01_simulation_helpers.R')
source('helpers/02_regression_helpers.R')
source('helpers/03_evaluation_helpers.R')
Rcpp::sourceCpp('helpers/04_estimate_variance_C.cpp')
#| code-fold: false
tictoc::tic('ALL')
tictoc::tic("Simu, trafo and vars")
TMax <- 100
TMax
plan(multisession, workers = 2)
my_mset <- metric_set(accuracy, sens, spec)
Hs <- seq(0.6, 0.9, length.out = 6)
n_seeds <- 200
set.seed(25324565)
time_series_dat_original <- simulate_many_fGN(TMax, Hs, n_seeds)
grid <- compute_grid(TMax = min(TMax / 3, 100)) |>
filter(lBd <= 10)
mu <- c(0.5)
compute_grid_estimates_mu <- function (mu, time_series_dat_original, grid, mset) {
time_series_dat <- time_series_dat_original %>%
mutate(
# Subordinate
ts = map(ts, ~exp(.^2 / 2)),
# Convert to Binomial process via discrete measure mu
ts = map(ts, ~convert_to_bernoulli(., mu = mu))
)
vars <- time_series_dat %>%
mutate(variance = future_map(ts, estimate_variances, kMax = min(TMax / 3, 100)))
grid_estimates <- vars %>%
mutate(
grid_estimates = future_map(
variance,
~estimate_var_slope_grid(., grid = grid)
)
)
grid_estimates
}
tictoc::toc()
set.seed(25324565)
time_series_dat_original <- simulate_many_fGN(TMax, Hs, n_seeds)
grid <- compute_grid(TMax = min(TMax / 3, 100)) |>
filter(lBd <= 10)
mu <- c(0.5)
compute_grid_estimates_mu <- function (mu, time_series_dat_original, grid, mset) {
time_series_dat <- time_series_dat_original %>%
mutate(
# Subordinate
ts = map(ts, ~exp(.^2 / 2)),
# Convert to Binomial process via discrete measure mu
ts = map(ts, ~convert_to_bernoulli(., mu = mu))
)
vars <- time_series_dat %>%
mutate(variance = map(ts, estimate_variance_C, kMax = min(TMax / 3, 100)))
grid_estimates <- vars %>%
mutate(
grid_estimates = future_map(
variance,
~estimate_var_slope_grid(., grid = grid)
)
)
grid_estimates
}
tictoc::toc()
#| code-fold: false
tictoc::tic('ALL')
tictoc::tic("Simu, trafo and vars")
TMax <- 100
TMax
plan(multisession, workers = 2)
my_mset <- metric_set(accuracy, sens, spec)
Hs <- seq(0.6, 0.9, length.out = 6)
n_seeds <- 200
set.seed(25324565)
time_series_dat_original <- simulate_many_fGN(TMax, Hs, n_seeds)
grid <- compute_grid(TMax = min(TMax / 3, 100)) |>
filter(lBd <= 10)
mu <- c(0.5)
compute_grid_estimates_mu <- function (mu, time_series_dat_original, grid, mset) {
time_series_dat <- time_series_dat_original %>%
mutate(
# Subordinate
ts = map(ts, ~exp(.^2 / 2)),
# Convert to Binomial process via discrete measure mu
ts = map(ts, ~convert_to_bernoulli(., mu = mu))
)
vars <- time_series_dat %>%
mutate(variance = map(ts, estimate_variance_C, kMax = min(TMax / 3, 100)))
grid_estimates <- vars %>%
mutate(
grid_estimates = future_map(
variance,
~estimate_var_slope_grid(., grid = grid)
)
)
grid_estimates
}
tictoc::toc()
grid_estimates
compute_grid_estimates_mu
compute_grid_estimates_mu
time_series_dat_original
compute_grid_estimates_mu(mu, time_series_dat_original)
compute_grid_estimates_mu
compute_grid_estimates_mu(mu, time_series_dat_original, grid, my_mset)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
compute_grid_estimates_mu(mu, time_series_dat_original, grid, my_mset)
tictoc::toc()
grid_single <- grid |> filter(
lBd == 1,
uBd == 30
)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
compute_grid_estimates_mu(mu, time_series_dat_original, grid_single, my_mset)
tictoc::toc()
grid_single <- grid |> filter(
lBd == 1,
uBd == 30
)
plan(multisession, workers = 2)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
compute_grid_estimates_mu(mu, time_series_dat_original, grid_single, my_mset)
tictoc::toc()
grid_single <- grid |> filter(
lBd == 1,
uBd == 30
)
plan(multisession, workers = 2)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
single_grid_est <- compute_grid_estimates_mu(mu, time_series_dat_original, grid_single, my_mset) |>
select(-c(ts, variance)) |>
unnest(grid_estimates)
tictoc::toc()
single_grid_est
grid_single <- grid |> filter(
lBd == 1,
uBd == 30
)
plan(multisession, workers = 2)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
single_grid_est <- tibble(
mu_id = 1:2,
mu = map(mu, ~runif(100)),
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tictoc::toc()
single_grid_est <- tibble(
mu_id = 1:2,
mu = map(mu, ~runif(100)),
) |>
mutate(
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tibble(
mu_id = 1:2,
mu = map(mu, ~runif(100)),
)
tibble(
mu_id = 1:2,
mu = map(mu, ~list(runif(100))),
)
tibble(
mu_id = 1:2,
mu = map(mu_id, ~runif(100)),
)
grid_single <- grid |> filter(
lBd == 1,
uBd == 30
)
plan(multisession, workers = 2)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
single_grid_est <- tibble(
mu_id = 1:2,
mu = map(mu_id, ~runif(100)),
) |>
mutate(
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tictoc::toc()
single_grid_est
single_grid_est |>
select(-mu) |>
unnest(grid_estimates)
mu_grid <- tibble(
mu_id = 1:2,
mu = map(mu_id, ~runif(100)),
)
memory_votes <- single_grid_est |>
select(-mu) |>
unnest(grid_estimates) |>
group_by(simu_id, H, lBd, uBd) |>
summarise(
lrd_votes = sum(classification == "LRD"),
srd_votes = sum(classification != "LRD"),
.groups = 'drop'
)
# classify as LRD by majority of votes
majority_classification <- memory_votes |>
mutate(classification = if_else(lrd_votes >= nrow(mu_grid) / 2, "LRD", "SRD"))
majority_classification
plan(multisession, workers = 2)
grid_single <- grid |> filter(
lBd == 1,
uBd == 30
)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
mu_grid <- tibble(
mu_id = 1:10,
mu = map(mu_id, ~runif(100)),
)
single_grid_est <- mu_grid |>
mutate(
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tictoc::toc()
memory_votes <- single_grid_est |>
select(-mu) |>
unnest(grid_estimates) |>
group_by(simu_id, H, lBd, uBd) |>
summarise(
lrd_votes = sum(classification == "LRD"),
srd_votes = sum(classification != "LRD"),
.groups = 'drop'
)
# classify as LRD by majority of votes
majority_classification <- memory_votes |>
mutate(classification = if_else(lrd_votes >= nrow(mu_grid) / 2, "LRD", "SRD"))
majority_classification  |>
mutate(
memory = if_else(H >= 3 / 4, "LRD", "SRD"),
across(.cols = c(classification, memory), ~factor(.x, levels = c("LRD", "SRD")))
) |>
group_by(lBd, uBd) |>
my_mset(truth = memory, estimate = classification) |>
rename(metric = .metric, estimate = .estimate) |>
mutate(metric = case_when(
metric == 'accuracy' ~ 'Accuracy',
metric == 'sens' ~ 'Sensitivity',
metric == 'spec' ~ 'Specificity'
)) |>
select(!.estimator)
plan(multisession, workers = 2)
grid_single <- grid |> filter(
lBd == 1,
uBd == 30
)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
mu_grid <- tibble(
mu_id = 1:50,
mu = map(mu_id, ~runif(100)),
)
single_grid_est <- mu_grid |>
mutate(
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tictoc::toc()
memory_votes <- single_grid_est |>
select(-mu) |>
unnest(grid_estimates) |>
group_by(simu_id, H, lBd, uBd) |>
summarise(
lrd_votes = sum(classification == "LRD"),
srd_votes = sum(classification != "LRD"),
.groups = 'drop'
)
# classify as LRD by majority of votes
majority_classification <- memory_votes |>
mutate(classification = if_else(lrd_votes >= nrow(mu_grid) / 2, "LRD", "SRD"))
majority_classification  |>
mutate(
memory = if_else(H >= 3 / 4, "LRD", "SRD"),
across(.cols = c(classification, memory), ~factor(.x, levels = c("LRD", "SRD")))
) |>
group_by(lBd, uBd) |>
my_mset(truth = memory, estimate = classification) |>
rename(metric = .metric, estimate = .estimate) |>
mutate(metric = case_when(
metric == 'accuracy' ~ 'Accuracy',
metric == 'sens' ~ 'Sensitivity',
metric == 'spec' ~ 'Specificity'
)) |>
select(!.estimator)
memory_votes
memory_votes |> filter(lrd_votes %in% c(0, 50))
plan(multisession, workers = 2)
grid_single <- grid |> filter(
lBd == 1,
uBd == 6
)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
mu_grid <- tibble(
mu_id = 1:50,
mu = map(mu_id, ~runif(100)),
)
single_grid_est <- mu_grid |>
mutate(
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tictoc::toc()
memory_votes <- single_grid_est |>
select(-mu) |>
unnest(grid_estimates) |>
group_by(simu_id, H, lBd, uBd) |>
summarise(
lrd_votes = sum(classification == "LRD"),
srd_votes = sum(classification != "LRD"),
.groups = 'drop'
)
# classify as LRD by majority of votes
majority_classification <- memory_votes |>
mutate(classification = if_else(lrd_votes >= nrow(mu_grid) / 2, "LRD", "SRD"))
majority_classification  |>
mutate(
memory = if_else(H >= 3 / 4, "LRD", "SRD"),
across(.cols = c(classification, memory), ~factor(.x, levels = c("LRD", "SRD")))
) |>
group_by(lBd, uBd) |>
my_mset(truth = memory, estimate = classification) |>
rename(metric = .metric, estimate = .estimate) |>
mutate(metric = case_when(
metric == 'accuracy' ~ 'Accuracy',
metric == 'sens' ~ 'Sensitivity',
metric == 'spec' ~ 'Specificity'
)) |>
select(!.estimator)
memory_votes
plan(multisession, workers = 2)
grid_single <- grid |> filter(
lBd == 1,
uBd == 6
)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
mu_grid <- tibble(
mu_id = 1:2,
mu = map(mu_id, ~runif(1000)),
)
single_grid_est <- mu_grid |>
mutate(
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tictoc::toc()
plan(multisession, workers = 2)
grid_single <- grid |> filter(
lBd == 1,
uBd == 6
)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
mu_grid <- tibble(
mu_id = 1:2,
mu = map(mu_id, ~runif(500)),
)
single_grid_est <- mu_grid |>
mutate(
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tictoc::toc()
memory_votes <- single_grid_est |>
select(-mu) |>
unnest(grid_estimates) |>
group_by(simu_id, H, lBd, uBd) |>
summarise(
lrd_votes = sum(classification == "LRD"),
srd_votes = sum(classification != "LRD"),
.groups = 'drop'
)
memory_votes
memory_votes <- single_grid_est |>
select(-mu) |>
unnest(grid_estimates) |>
group_by(simu_id, H, lBd, uBd) |>
summarise(
lrd_votes = sum(classification == "LRD"),
srd_votes = sum(classification != "LRD"),
.groups = 'drop'
)
# classify as LRD by majority of votes
majority_classification <- memory_votes |>
mutate(classification = if_else(lrd_votes >= nrow(mu_grid) / 2, "LRD", "SRD"))
majority_classification  |>
mutate(
memory = if_else(H >= 3 / 4, "LRD", "SRD"),
across(.cols = c(classification, memory), ~factor(.x, levels = c("LRD", "SRD")))
) |>
group_by(lBd, uBd) |>
my_mset(truth = memory, estimate = classification) |>
rename(metric = .metric, estimate = .estimate) |>
mutate(metric = case_when(
metric == 'accuracy' ~ 'Accuracy',
metric == 'sens' ~ 'Sensitivity',
metric == 'spec' ~ 'Specificity'
)) |>
select(!.estimator)
plan(multisession, workers = 2)
grid_single <- grid |> filter(
lBd == 1,
uBd == 6
)
tictoc::tic()
set.seed(24234)
mu <- runif(100)
mu_grid <- tibble(
mu_id = 1:50,
mu = map(mu_id, ~runif(500)),
)
single_grid_est <- mu_grid |>
mutate(
grid_est = map(
mu, ~compute_grid_estimates_mu(.x, time_series_dat_original, grid_single, my_mset)
),
grid_est = map(grid_est, ~(.x |> select(-c(ts, variance))))
) |>
unnest(grid_est)
tictoc::toc()
memory_votes <- single_grid_est |>
select(-mu) |>
unnest(grid_estimates) |>
group_by(simu_id, H, lBd, uBd) |>
summarise(
lrd_votes = sum(classification == "LRD"),
srd_votes = sum(classification != "LRD"),
.groups = 'drop'
)
# classify as LRD by majority of votes
majority_classification <- memory_votes |>
mutate(classification = if_else(lrd_votes >= nrow(mu_grid) / 2, "LRD", "SRD"))
majority_classification  |>
mutate(
memory = if_else(H >= 3 / 4, "LRD", "SRD"),
across(.cols = c(classification, memory), ~factor(.x, levels = c("LRD", "SRD")))
) |>
group_by(lBd, uBd) |>
my_mset(truth = memory, estimate = classification) |>
rename(metric = .metric, estimate = .estimate) |>
mutate(metric = case_when(
metric == 'accuracy' ~ 'Accuracy',
metric == 'sens' ~ 'Sensitivity',
metric == 'spec' ~ 'Specificity'
)) |>
select(!.estimator)
